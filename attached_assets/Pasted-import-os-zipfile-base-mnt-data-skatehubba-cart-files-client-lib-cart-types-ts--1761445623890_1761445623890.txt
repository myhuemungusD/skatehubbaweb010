import os, zipfile

base = "/mnt/data/skatehubba_cart"
files = {
"client/lib/cart/types.ts": """export type CartItem = {
  id: string;
  name: string;
  price: number;
  quantity: number;
  image?: string;
};

export type CartSnapshot = {
  items: CartItem[];
  subtotal: number;
  count: number;
};
""",
"client/lib/cart/store.ts": """\"use client\";
import { create } from "zustand";
import { persist } from "zustand/middleware";
import type { CartItem, CartSnapshot } from "./types";

type CartState = {
  items: CartItem[];
  add: (item: CartItem) => void;
  remove: (id: string) => void;
  setQty: (id: string, qty: number) => void;
  clear: () => void;
  snapshot: () => CartSnapshot;
};

export const useCart = create<CartState>()(
  persist(
    (set, get) => ({
      items: [],
      add: (item) =>
        set((s) => {
          const found = s.items.find((i) => i.id === item.id);
          if (found) {
            return {
              items: s.items.map((i) =>
                i.id === item.id ? { ...i, quantity: i.quantity + item.quantity } : i
              ),
            };
          }
          return { items: [...s.items, item] };
        }),
      remove: (id) => set((s) => ({ items: s.items.filter((i) => i.id !== id) })),
      setQty: (id, qty) =>
        set((s) => ({
          items: s.items
            .map((i) => (i.id === id ? { ...i, quantity: Math.max(1, qty) } : i))
            .filter((i) => i.quantity > 0),
        })),
      clear: () => set({ items: [] }),
      snapshot: () => {
        const items = get().items;
        const subtotal = items.reduce((sum, i) => sum + i.price * i.quantity, 0);
        const count = items.reduce((n, i) => n + i.quantity, 0);
        return { items, subtotal, count };
      },
    }),
    { name: "skatehubba-cart" }
  )
);
""",
"client/components/cart/AddToCartButton.tsx": """\"use client\";
import { useCart } from \"@/client/lib/cart/store\";
import type { CartItem } from \"@/client/lib/cart/types\";

export default function AddToCartButton(props: CartItem) {
  const add = useCart((s) => s.add);
  return (
    <button
      onClick={() => add({ ...props, quantity: Math.max(1, props.quantity || 1) })}
      className=\"rounded bg-black text-white px-3 py-2\"
    >
      Add to Cart
    </button>
  );
}
""",
"client/components/cart/CartDrawer.tsx": """\"use client\";
import { useEffect, useRef, useState } from \"react\";
import { useCart } from \"@/client/lib/cart/store\";

export default function CartDrawer() {
  const { snapshot, remove, setQty, clear } = useCart();
  const [open, setOpen] = useState(false);
  const panelRef = useRef<HTMLDivElement>(null);
  const snap = snapshot();

  useEffect(() => {
    function onEsc(e: KeyboardEvent) { if (e.key === \"Escape\") setOpen(false); }
    window.addEventListener(\"keydown\", onEsc);
    return () => window.removeEventListener(\"keydown\", onEsc);
  }, []);

  return (
    <>
      <button
        aria-label=\"Open cart\"
        onClick={() => setOpen(true)}
        className=\"relative inline-flex items-center gap-2 rounded border px-3 py-2\"
      >
        Cart
        <span className=\"inline-flex h-5 min-w-5 items-center justify-center rounded-full bg-black text-white text-xs px-1\">
          {snap.count}
        </span>
      </button>

      {open && (
        <div className=\"fixed inset-0 z-50\">
          <div
            className=\"absolute inset-0 bg-black/50\"
            onClick={() => setOpen(false)}
            aria-hidden
          />
          <div
            ref={panelRef}
            className=\"absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl p-4 overflow-y-auto\"
            role=\"dialog\"
            aria-modal=\"true\"
          >
            <div className=\"flex items-center justify-between mb-4\">
              <h2 className=\"text-lg font-semibold\">Your Cart</h2>
              <button onClick={() => setOpen(false)} className=\"p-2\">âœ•</button>
            </div>

            {snap.items.length === 0 ? (
              <p className=\"text-sm text-gray-600\">Your cart is empty.</p>
            ) : (
              <ul className=\"space-y-3\">
                {snap.items.map((i) => (
                  <li key={i.id} className=\"flex gap-3\">
                    {i.image ? (
                      <img src={i.image} alt={i.name} className=\"h-16 w-16 object-cover rounded\" />
                    ) : (
                      <div className=\"h-16 w-16 bg-gray-200 rounded\" />
                    )}
                    <div className=\"flex-1\">
                      <div className=\"flex justify-between\">
                        <p className=\"font-medium\">{i.name}</p>
                        <button onClick={() => remove(i.id)} className=\"text-sm text-red-600\">Remove</button>
                      </div>
                      <p className=\"text-sm\">${i.price.toFixed(2)}</p>
                      <div className=\"mt-2 flex items-center gap-2\">
                        <label className=\"text-sm\">Qty</label>
                        <input
                          type=\"number\"
                          min={1}
                          value={i.quantity}
                          onChange={(e) => setQty(i.id, Number(e.target.value))}
                          className=\"w-16 rounded border px-2 py-1 text-sm\"
                        />
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            )}

            <div className=\"mt-6 border-t pt-4\">
              <div className=\"flex justify-between text-base\">
                <span>Subtotal</span>
                <span className=\"font-semibold\">${snap.subtotal.toFixed(2)}</span>
              </div>
              <div className=\"mt-4 flex gap-2\">
                <button onClick={clear} className=\"w-1/3 rounded border px-3 py-2\">Clear</button>
                <a
                  href=\"/cart\"
                  className=\"w-2/3 text-center rounded bg-black text-white px-3 py-2\"
                  onClick={() => setOpen(false)}
                >
                  Go to Checkout
                </a>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
""",
"client/app/cart/page.tsx": """\"use client\";
import { useCart } from \"@/client/lib/cart/store\";

export default function CartPage() {
  const { snapshot, remove, setQty, clear } = useCart();
  const snap = snapshot();

  return (
    <main className=\"mx-auto max-w-3xl p-4\">
      <h1 className=\"text-2xl font-bold mb-4\">Checkout</h1>

      {snap.items.length === 0 ? (
        <p>Your cart is empty.</p>
      ) : (
        <>
          <table className=\"w-full text-left\">
            <thead>
              <tr className=\"border-b\">
                <th className=\"py-2\">Product</th>
                <th className=\"py-2\">Price</th>
                <th className=\"py-2\">Qty</th>
                <th className=\"py-2\">Total</th>
                <th />
              </tr>
            </thead>
            <tbody>
              {snap.items.map((i) => (
                <tr key={i.id} className=\"border-b\">
                  <td className=\"py-2\">{i.name}</td>
                  <td className=\"py-2\">${i.price.toFixed(2)}</td>
                  <td className=\"py-2\">
                    <input
                      type=\"number\"
                      min={1}
                      value={i.quantity}
                      onChange={(e) => setQty(i.id, Number(e.target.value))}
                      className=\"w-20 rounded border px-2 py-1\"
                    />
                  </td>
                  <td className=\"py-2\">${(i.price * i.quantity).toFixed(2)}</td>
                  <td className=\"py-2\">
                    <button onClick={() => remove(i.id)} className=\"text-red-600\">Remove</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          <div className=\"mt-6 flex items-center justify-between\">
            <button onClick={clear} className=\"rounded border px-3 py-2\">Clear cart</button>
            <div className=\"text-xl font-semibold\">Subtotal ${snap.subtotal.toFixed(2)}</div>
          </div>

          <button
            onClick={() => alert(`Proceeding to payment. Subtotal $${snap.subtotal.toFixed(2)}`)}
            className=\"mt-4 w-full rounded bg-black text-white px-4 py-3 text-lg\"
          >
            Pay now
          </button>
        </>
      )}
    </main>
  );
}
"""
}

# write files
for rel, content in files.items():
    fp = os.path.join(base, rel)
    os.makedirs(os.path.dirname(fp), exist_ok=True)
    with open(fp, "w", encoding="utf-8") as f:
        f.write(content)

zip_path = "/mnt/data/feature-shopping-cart.zip"
with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as z:
    for rel in files.keys():
        z.write(os.path.join(base, rel), arcname=rel)

zip_path
